Ribbit::Lib
  hex_to_raw
  raw_to_hex
  type_to_string
  string_to_type

repo =
Ribbit::Repository.new(path)
  ctnt = repo.read(sha)
  gobj = repo.lookup(sha, type[?])
  sha  = repo.write(content, type)
  sha  = repo.hash(content, type)
  bool = repo.exists(sha)
         repo.close


object = 
Ribbit::Object.new(content, type)
  obj.sha
  obj.size
  obj.type_int
  obj.type_str
  obj.data
  obj.gobject
  obj.free

gobjc =
Ribbit::Commit.new(content, type) < Ribbit::Object
  sha  = gobjc.sha
  str  = gobjc.message
  str  = gobjc.message_short
  str  = gobjc.message_body
  prsn = gobjc.author
  prsn = gobjc.committer
  tree = gobjc.tree
  sha  = gobjc.tree_sha
  arr  = gobjc.parents [*]

ent =
Ribbit::TreeEntry.new(mode, name, sha)
  int  = ent.attributes
  str  = ent.name
  sha  = ent.sha
  gobj = ent.gobject

gobtr =
Ribbit::Tree.new(content, type) < Ribbit::Object
  sha  = gobtr.sha
  int  = gobtr.entry_count
         gobtr.traverse(:name/:index)
  ent  = gobtr.next

gobtg =
Ribbit::Tag.new(content, type) < Ribbit::Object
  sha  = gobtg.sha
  gobj = gobtg.target
  int  = gobtg.type
  str  = gobtg.name
  prsn = gobtg.tagger
  str  = gobtg.message

prsn =
Ribbit::Person.new(data)
  str  = prsn.name
  str  = prsn.email
  time = prsn.time

walker = 
Ribbit::Walker.new(path) 
         walker.push(sha_interesting)
         walker.hide(sha_uninteresting)
  sha  = walker.next # false if none left
         walker.reset

