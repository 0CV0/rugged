Ribbit::Lib
  hex_to_raw
  raw_to_hex
  type_to_string
  string_to_type
  hash # SHA1 hashing is not exclusive to the ODB


# the ODB class is dropped
# if required, lower level ODB functions can be wrapped
# from the repository -- although I don't see the need
# to have raw read/write functions available from Ruby:
# the read data needs a lot of parsing before it can be
# useful at all
repo = 
Ribbit::Repository.new(path)
		 exists(sha) # wrap odb.exists
  gobj = repo.lookup(sha, type[?])
# not required: Ribbit::Object has free method
#         repo.free 

# FIXME: at the moment, Ribbit::Object and all the
# inherited repository objects are read only --
# constructors take a source repository & the sha
# of the object to generate the object instance
# Once there's support for creating new objects from
# C, we'll require an overloaded constructor for each
# object (the object's attributes will be the constructor's
# arguments; the SHA1 of the object will be automatically
# generated by the library).

object = 
Ribbit::Object.new(repo, sha)
  obj.sha
  obj.size
  obj.type_int
  obj.type_str
  obj.data
  obj.gobject
  obj.free

gobjc =
Ribbit::Commit.new(repo, sha) < Ribbit::Object
  sha  = gobjc.sha
  str  = gobjc.message
  str  = gobjc.message_short
  str  = gobjc.message_body
  prsn = gobjc.author
  prsn = gobjc.committer
  tree = gobjc.tree
  sha  = gobjc.tree_sha
  arr  = gobjc.parents [*]

# FIXME: tree entries should not be constructed
# by the user, they are generated by the library
# from tree objects. They could be replaced by
# a dictionary.
ent =
Ribbit::TreeEntry.new()
  int  = ent.attributes
  str  = ent.name
  sha  = ent.sha
  gobj = ent.gobject

gobtr =
Ribbit::Tree.new(repo, sha) < Ribbit::Object
  sha  = gobtr.sha
  int  = gobtr.entry_count
         gobtr.traverse(:name/:index)
  ent  = gobtr.next

gobtg =
Ribbit::Tag.new(repo, sha) < Ribbit::Object
  sha  = gobtg.sha
  gobj = gobtg.target
  int  = gobtg.type
  str  = gobtg.name
  prsn = gobtg.tagger
  str  = gobtg.message

prsn =
Ribbit::Person.new(data)
  str  = prsn.name
  str  = prsn.email
  time = prsn.time

walker = 
Ribbit::Walker.new(repo) 
         walker.push(hex_sha_interesting)
         walker.hide(hex_sha_uninteresting)
  sha  = walker.next # false if none left
         walker.reset


## TODO ##

 - diff-tree
 - rev-parse

 - branch (list, create, delete, safe_delete, move)
 - notes

 - index (read-tree, write-tree, update, read, write)
 - name-rev, describe
 - reflog (read, write)

 - fetch (http, git)
 - push (http, git, ssh)

 - diff
 - merge

 - fsck

