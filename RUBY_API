# Lib are general library functions that 
# work without a repository

Ribbit::Lib
  hex_to_raw
  raw_to_hex
  type_to_string
  string_to_type
  hash # SHA1 hashing is not exclusive to the ODB

# Repository is the main repository object that everything
# else will eminate from

repo =
Ribbit::Repository.new(path)
  ctnt, type = repo.read(sha)
  gobj = repo.lookup(sha, type[?])  # do we need the type? or provide for checking?
  sha  = repo.write(content, type)
  sha  = repo.hash(content, type)
  bool = repo.exists(sha)
  walker = repo.walker

# Object is the main object class - it shouldn't be created directly,
# but all of these methods should be useful in it's derived classes

object = 
Ribbit::Object.new(repo, sha)
         obj.sha
         obj.size
         obj.type_int
         obj.type_str
         obj.data

         obj.written?
   sha = obj.write

# The next classes are for consuming and creating the 4 base
# git object types.  just about every method should be able to take
# of each should be able to take a parameter to change the value
# so the object can be re-written slightly differently or no parameter
# to simply read the current value out

gobjc =
Ribbit::Commit.new < Ribbit::Object
  str   = gobjc.message
  str   = gobjc.message_short
  str   = gobjc.message_body
  prsn  = gobjc.author
  prsn  = gobjc.committer
  gobjr = gobjc.tree
  sha   = gobjc.tree_sha
  arr   = gobjc.parents [*]

gobtg =
Ribbit::Tag.new < Ribbit::Object
  gobj  = gobtg.target
  int   = gobtg.target_type
  str   = gobtg.name
  prsn  = gobtg.tagger
  str   = gobtg.message

gobtr =
Ribbit::Tree.new < Ribbit::Object
          gobtr.add(ent)
          gobtr.remove(name)
  int   = gobtr.entry_count
          gobtr.traverse(:name/:index)
  ent   = gobtr.next

ent =
Ribbit::TreeEntry.new(mode, name, sha)
  int  = ent.mode
  str  = ent.type
  str  = ent.name
  sha  = ent.sha
  gobj = ent.gobject

prsn =
Ribbit::Person.new(name, email, time)
  str  = prsn.name
  str  = prsn.email
  time = prsn.time

walker = 
Ribbit::Walker.new(repo) 
         walker.push(hex_sha_interesting)
         walker.hide(hex_sha_uninteresting)
  sha  = walker.next # false if none left
         walker.reset

