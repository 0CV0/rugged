# Lib are general library functions that 
# work without a repository

Ribbit::Lib
  hex_to_raw
  raw_to_hex
  type_to_string
  string_to_type

# Repository is the main repository object that everything
# else will eminate from

repo =
Ribbit::Repository.new(path)
  ctnt, type = repo.read(sha)
  gobj = repo.lookup(sha, type[?])  # optional type argument for checking
  sha  = repo.write(content, type)
  sha  = repo.hash(content, type)
  bool = repo.exists(sha)

# Object is the main object class - it shouldn't be created directly,
# but all of these methods should be useful in it's derived classes
# TODO: how do we prevent instantation of the Object?

object = 
# Constructor is inherited by all the repository objects
# 'sha' is the ID of the object; 
# 'repo' is the repository where the object resides
# If both 'sha' and 'repo' exist, the object will be looked up on
# the repository and instantiated
# If the 'sha' ID of the object is missing, the object will be
# created in memory and can be written later on to the repository
Ribbit::Object(repo, sha)
  obj.sha
  obj.type

  cnt = obj.read_raw	# read the raw data of the object
  sha = obj.write		# write the object to a repository
		

# The next classes are for consuming and creating the 4 base
# git object types.  just about every method should be able to take
# of each should be able to take a parameter to change the value
# so the object can be re-written slightly differently or no parameter
# to simply read the current value out

gobjc =
Ribbit::Commit.new < Ribbit::Object
  str   = gobjc.message
  str   = gobjc.message_short
  str   = gobjc.message_body
  prsn  = gobjc.author
  prsn  = gobjc.committer
  gobjr = gobjc.tree
  sha   = gobjc.tree_sha
  arr   = gobjc.parents [*]

gobtg =
Ribbit::Tag.new < Ribbit::Object
  gobj  = gobtg.target
  int   = gobtg.target_type
  str   = gobtg.name
  prsn  = gobtg.tagger
  str   = gobtg.message

gobtr =
Ribbit::Tree.new < Ribbit::Object
          gobtr.add(ent) # TODO
          gobtr.remove(name) # TODO
  int   = gobtr.entry_count
  ent   = gobtr.get_entry

  [ent] = gobtr.entries # TODO: array with all the entries in a tree
          gobtr.traverse(:name/:index) # TODO: what is this?

ent =
Ribbit::TreeEntry.new(attributes, name, sha)
  int  = ent.attributes
  str  = ent.name
  sha  = ent.sha
  gobj = ent.to_object

# Person information is returned as a hash table

walker = 
Ribbit::Walker.new(repo) 
         walker.push(hex_sha_interesting)
         walker.hide(hex_sha_uninteresting)
  cmt  = walker.next # false if none left
         walker.reset

